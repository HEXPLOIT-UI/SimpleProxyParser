package net.ndexploit.proxyparser;

import lombok.SneakyThrows;
import org.jsoup.Jsoup;
import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static net.ndexploit.proxyparser.LinkType.RAW;
import static net.ndexploit.proxyparser.ProxyType.*;

public class Services {

    public final static List<Proxy> links = new ArrayList<>();

    public static void Init() {
        loadServices();
        loadFiles();
        parseProxies();
    }

    private static void loadServices() {
        System.out.println("Loading services");
        links.add(new Proxy("https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt", UNCHECKED, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt", HTTP, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt", SOCKS4, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt", SOCKS5, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt", HTTP, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/https.txt", HTTPS, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/socks4.txt", SOCKS4, RAW));
        links.add(new Proxy("https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/socks5.txt", SOCKS5, RAW));
        System.out.println("Available " + links.size() + " services");
    }

    @SneakyThrows
    private static void loadFiles() {
        System.out.println("Loading files");
        new File("Proxies").mkdir();
        new File("Proxies\\Http.txt").createNewFile();
        new File("Proxies\\Https.txt").createNewFile();
        new File("Proxies\\Socks4.txt").createNewFile();
        new File("Proxies\\Socks5.txt").createNewFile();
        new File("Proxies\\Unchecked.txt").createNewFile();
    }

    @SneakyThrows
    private static void parseProxies() {
        System.out.println("start parsing");
        FileWriter HttpProxies = new FileWriter("Proxies\\Http.txt");
        FileWriter HttpsProxies = new FileWriter("Proxies\\Https.txt");
        FileWriter Socks4Proxies = new FileWriter("Proxies\\Socks4.txt");
        FileWriter Socks5Proxies = new FileWriter("Proxies\\Socks5.txt");
        FileWriter UncheckedProxies = new FileWriter("Proxies\\Unchecked.txt");
        for (Proxy proxy : links) {
            if (proxy.getLinkType().equals(RAW)) {
                if(proxy.getProxyType().equals(UNCHECKED)) {
                    String text = Jsoup.connect(proxy.getLink()).get().text().replace(" ", "\n");
                    UncheckedProxies.write(text);
                }
                else if(proxy.getProxyType().equals(HTTP)) {
                    String text = Jsoup.connect(proxy.getLink()).get().text().replace(" ", "\n");
                    HttpProxies.write(text);
                } else if(proxy.getProxyType().equals(HTTPS)) {
                    String text = Jsoup.connect(proxy.getLink()).get().text().replace(" ", "\n");
                    HttpsProxies.write(text);
                } else if(proxy.getProxyType().equals(SOCKS4)) {
                    String text = Jsoup.connect(proxy.getLink()).get().text().replace(" ", "\n");
                    Socks4Proxies.write(text);
                } else if(proxy.getProxyType().equals(SOCKS5)) {
                    String text = Jsoup.connect(proxy.getLink()).get().text().replace(" ", "\n");
                    Socks5Proxies.write(text);
                }
            }
        }
        HttpProxies.close();
        HttpsProxies.close();
        Socks4Proxies.close();
        Socks5Proxies.close();
        UncheckedProxies.close();
        System.out.println("end parsing");
        System.out.println("Sift out repetitive proxies");
        new Thread(() -> siftOutRepetitive(Paths.get("Proxies\\Http.txt"))).start();
        new Thread(() -> siftOutRepetitive(Paths.get("Proxies\\Https.txt"))).start();
        new Thread(() -> siftOutRepetitive(Paths.get("Proxies\\Socks4.txt"))).start();
        new Thread(() -> siftOutRepetitive(Paths.get("Proxies\\Socks5.txt"))).start();
        new Thread(() -> siftOutRepetitive(Paths.get("Proxies\\Unchecked.txt"))).start();
    }

    @SneakyThrows
    public static void siftOutRepetitive(Path path) {
        List<String> sortedList =  new ArrayList<>();
        for (String str : Files.readAllLines(path)) {
            if(!sortedList.contains(str) && str.length() < 25) {
                sortedList.add(str);
            }
        }
        Files.write(path, sortedList);
    }
}
